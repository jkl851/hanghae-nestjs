# 해당 워크플로우의 타이틀
# 명시하지 않으면 파일 경로가 타이틀이 됨
name: CICD my-nestjs
# 환경변수
env:
  REGISTRY: ghcr.io
  DOCKER_IMAGE: ${{ github.repository }}
  # github.repository변수는 owner/repository로 구성 ex)goodonion/nest_test
  DOCKER_CONTAINER: my_nest_server
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 276173553022.dkr.ecr.ap-northeast-2.amazonaws.com/repo-nestjs
  ECR_REPOSITORY: repo-nestjs

#이벤트
# main 브랜치에 한하여 push가 일어날 경우
on:
  push:
    branches: ["main"]

# jobs

# 이벤트가 발생하면 해야할 작업을 명시
# 테스트, 빌드, 배포 단위로 명시
# 각각의 job은 Runner라는 컨테이너에서 개별적으로 실행
jobs:
  # 프로젝트 코드 테스트 With Jest 
  test:
    # ubuntu-latest 환경의 Runner에서 실행
    runs-on: ubuntu-latest

    # 컨테이너에 repository의 코드를 checkout 
    # node 환경 셋업
    # 의존성 설치 및 테스트 진행
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Setup node.js 18.10.0
        uses: actions/setup-node@v3 
        with: 
          node-version: 18.10.0
          cache: 'yarn'
      - run: yarn install
      - run: yarn run test:e2e

  # 도커 이미지 빌드

  build:

    # build가 시작되려면 test가 완료되어야 함
    needs: test
    runs-on: ubuntu-latest

    # Runner 에 repository의 코드를 checkout
    # 컨테이너에 도커 환경 셋업
    # Github Container Registry 로그인
    # 도커 이미지 빌드 후 ghcr에 push

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v3
    - name: Set up docker build
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to ghcr
      uses: docker/login-action@v2 
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.MY_ACC_TOKEN }}
    - name: Build and Push
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest

  # aws ec2 환경에 배포
  steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: setting-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: container-nestjs
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.setting-task-definition.outputs.task-definition }}
          service: service-nestjs
          cluster: nestjs-cluster
          wait-for-service-stability: false